/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package water_refilling_station;

import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Enrie John B. Edem
 */
public class inventory extends javax.swing.JInternalFrame {
     public Connection con = null;
     public Statement st = null;
    /**
     * Creates new form inventory
     */
    public inventory() {
        initComponents();
        viewdata();
    }
    public void theQuery(String query){
      try{         
          st = con.createStatement();
          st.executeUpdate(query);
      }catch(SQLException | HeadlessException ex){
          JOptionPane.showMessageDialog(null,ex.getMessage());
      }
  } public void viewdata() {
        try {
            DefaultTableModel mod = (DefaultTableModel) table.getModel();
            con = XConnect.Connect();
            String sql = "select *from pickup";
            st = con.createStatement();
            ResultSet rss = st.executeQuery(sql);
            mod.setRowCount(0);
            while (rss.next()) {
                mod.addRow(new Object[]{rss.getInt("ID"),rss.getString("Name"), rss.getString("Contact"), rss.getInt("Bottles"), rss.getDouble("Total")});
            }
        } catch (SQLException | HeadlessException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        cont = new javax.swing.JTextField();
        bot = new javax.swing.JTextField();
        epic = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setTitle("Pickup Inventory");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Contact #", "Bottles", "Total"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 60, 560, 460));

        update.setFont(new java.awt.Font("Bodoni MT Black", 1, 14)); // NOI18N
        update.setForeground(new java.awt.Color(0, 51, 153));
        update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Updateblack.png"))); // NOI18N
        update.setText("UPDATE");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        getContentPane().add(update, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 590, 160, 50));

        delete.setFont(new java.awt.Font("Bodoni MT Black", 1, 14)); // NOI18N
        delete.setForeground(new java.awt.Color(0, 51, 153));
        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TRASH.png"))); // NOI18N
        delete.setText("DELETE");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        getContentPane().add(delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 590, 150, 50));

        clear.setFont(new java.awt.Font("Bodoni MT Black", 1, 14)); // NOI18N
        clear.setForeground(new java.awt.Color(0, 51, 153));
        clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/clearlist.png"))); // NOI18N
        clear.setText("CLEAR");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        getContentPane().add(clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 590, 150, 50));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Name:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 280, 50, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Contact:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 340, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Bottles:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 390, 60, -1));

        name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nameKeyTyped(evt);
            }
        });
        getContentPane().add(name, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 280, 150, -1));

        cont.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                contKeyTyped(evt);
            }
        });
        getContentPane().add(cont, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 340, 150, -1));

        bot.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                botKeyTyped(evt);
            }
        });
        getContentPane().add(bot, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 390, 150, -1));

        epic.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        getContentPane().add(epic, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, 150, 150));

        jLabel3.setIcon(new javax.swing.ImageIcon("C:\\Users\\Enrie John B. Edem\\Pictures\\java\\graphic-design-clean-water_125098.jpeg")); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1010, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        int yn = JOptionPane.showConfirmDialog(this, "Are you sure you want to Update?", "Confirmation", JOptionPane.YES_NO_OPTION);
        if (yn == 0) {
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            try {
                con = XConnect.Connect();
                
                int row = table.getSelectedRow();
                String dataClicked = model.getValueAt(row, 0).toString();
                
                String a =bot.getText();
                double b =Double.parseDouble(a);
                
                String query = "update pickup set Name= '" + name.getText() + "',Contact='" + cont.getText() + "', Bottles='" + a + "', Total='" + b*20
                                 + "'where ID = '"+dataClicked+"'";
                PreparedStatement ps = con.prepareStatement(query);

                name.setText("");
                cont.setText("");
                bot.setText("");

                ps.executeUpdate(query);
                viewdata();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } else {

        }
    }//GEN-LAST:event_updateActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        DefaultTableModel mod = (DefaultTableModel) table.getModel();
        int row = table.getSelectedRow();
        con = XConnect.Connect();
        try {
            String dataClicked = mod.getValueAt(row, 0).toString();
            st = con.createStatement();
            ResultSet rs = st.executeQuery("select *from pickup where ID='" + dataClicked + "'");
            if (rs.next()) {
                byte[] img = rs.getBytes("Image");
                String a = rs.getString("Name");
                String b = rs.getString("Contact");
                int c = rs.getInt("Bottles");
                ImageIcon image = new ImageIcon(img);
                Image im = image.getImage();
                Image myImg = im.getScaledInstance(epic.getWidth(), epic.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon newImage = new ImageIcon(myImg);
                epic.setIcon(newImage);
                name.setText(a);
                cont.setText(b);
                bot.setText("" + c);

            }

        } catch (SQLException | HeadlessException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_tableMouseClicked

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int row = table.getSelectedRow();
        String dataClicked = model.getValueAt(row, 0).toString();
        try
        {
            con = XConnect.Connect();
            String query = "delete from pickup where id = '"+dataClicked+"'";
            PreparedStatement ps = con.prepareStatement(query);
            ps.execute();
            model.setRowCount(0);
            viewdata();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        try
        {
            con = XConnect.Connect();
            String query = "TRUNCATE TABLE pickup";
            PreparedStatement ps = con.prepareStatement(query);
            
            ps.execute();
            model.setRowCount(0);
            viewdata();
        }
        catch(Exception e)
        {
            
        }
    }//GEN-LAST:event_clearActionPerformed

    private void nameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameKeyTyped
         char c = evt.getKeyChar();
        String e = name.getText();
        if (!((c >= 'A') && (c <= 'Z') || (c >= 'a') && (c <= 'z') || c == '_' || c == '.' || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_nameKeyTyped

    private void contKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_contKeyTyped
        char c = evt.getKeyChar();
        String n = cont.getText();
        if (c != java.awt.event.KeyEvent.VK_BACK_SPACE && c != java.awt.event.KeyEvent.VK_DELETE) {
            if (!(c == '_' || c == '0' || c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9') || n.length() > 7) {
                if ((c == '.')) {
                    if (!n.contains(".")) {

                    } else {
                        getToolkit().beep();
                        evt.consume();
                    }
                } else {
                    getToolkit().beep();
                    evt.consume();
                }
            }
        }
    }//GEN-LAST:event_contKeyTyped

    private void botKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_botKeyTyped
        char c = evt.getKeyChar();
        String n = bot.getText();
        if (c != java.awt.event.KeyEvent.VK_BACK_SPACE && c != java.awt.event.KeyEvent.VK_DELETE) {
            if (!(c == '_' || c == '0' || c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9') || n.length() > 7) {
                if ((c == '.')) {
                    if (!n.contains(".")) {

                    } else {
                        getToolkit().beep();
                        evt.consume();
                    }
                } else {
                    getToolkit().beep();
                    evt.consume();
                }
            }
        }
    }//GEN-LAST:event_botKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bot;
    private javax.swing.JButton clear;
    private javax.swing.JTextField cont;
    private javax.swing.JButton delete;
    private javax.swing.JLabel epic;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField name;
    private javax.swing.JTable table;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
